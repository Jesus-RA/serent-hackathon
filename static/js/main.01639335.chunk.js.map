{"version":3,"sources":["components/SplashScreen.tsx","components/Card.tsx","components/GameScreen.tsx","components/EndScreen.tsx","App.tsx","index.tsx"],"names":["SplashScreen","_ref","onStartGame","_jsxs","className","children","_jsx","onClick","Card","cardNumber","cardIndex","isClicked","onCardClick","cardClass","setCardClass","useState","useEffect","includes","setTimeout","handleClick","GameScreen","x","y","onEndGame","MATCHES","setMatches","Set","tries","setTries","gameScreenClasses","setGameScreenClasses","cards","cardsTotal","pairs","i","push","fillWithPairs","sort","Math","random","cardsState","setCardsState","firstCard","setFirstCard","secondCard","setSecondCard","handleCardClick","updateCardState","prevState","add","resetSelectedCards","console","log","size","alert","_Fragment","style","gridTemplateColumns","map","card","idx","EndScreen","onRestartGame","App","gameState","setGameState","startGame","endGame","restartGame","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"qRA2BeA,MAVmCC,IAAsB,IAArB,YAAEC,GAAaD,EAChE,OACEE,eAAA,OAAKC,UAAU,SAAQC,SAAA,CACrBC,cAAA,MAAAD,SAAI,6BACJC,cAAA,KAAAD,SAAG,2CACHC,cAAA,UAAQC,QAASL,EAAYG,SAAC,iBAC1B,E,YCmBKG,MAzBmBP,IAAwD,IAAvD,WAAEQ,EAAU,UAAEC,EAAS,UAAEC,EAAS,YAAEC,GAAaX,EAClF,MAIOY,EAAWC,GAAgBC,mBAAS,QAa3C,OAXAC,qBAAU,KACLL,EACDG,EAAa,oBACND,EAAUI,SAAS,iBAC1BH,EAAa,kBACbI,YAAW,KACTJ,EAAa,OAAO,GACnB,KACL,GACC,CAACH,IAGFL,cAAA,OAAKF,UAAWS,EAAWN,QAlBTY,KAClBP,EAAYH,EAAYC,EAAU,EAiBcL,SAC9CC,cAAA,KAAAD,SAAII,KACA,EC4GKW,MAxHqBnB,IAA0B,IAAzB,EAAEoB,EAAC,EAAEC,EAAC,UAAEC,GAAWtB,EACtD,MAAOuB,EAASC,GAAcV,mBAAS,IAAIW,MACpCC,EAAOC,GAAYb,mBAAS,IAC5Bc,EAAmBC,GAAwBf,mBAAS,uBAE3DG,YAAW,KACTY,EAAqB,aAAa,GACjC,KAEH,MAAOC,GAAShB,mBA+EhB,SAAuBiB,GACrB,MAAMC,EAAQ,GACd,IAAK,IAAIC,EAAI,EAAGA,GAAKF,EAAa,EAAGE,IACnCD,EAAME,KAAKD,EAAGA,GAEhB,OAAOD,CACT,CArF2CG,CAAcf,EAAIC,GAwF9Ce,MAAK,IAAMC,KAAKC,SAAW,MAvF1C,MAAOC,EAAYC,GAAiB1B,mBAAqC,CAAC,IAEnE2B,EAAWC,GAAgB5B,mBAAoB,CAAEN,WAAY,KAAMC,UAAW,QAC9EkC,EAAYC,GAAiB9B,mBAAoB,CAAEN,WAAY,KAAMC,UAAW,OAEvF,SAASoC,EAAgBrC,EAAoBC,GAExCgC,EAAUhC,YAAcA,IAKA,OAAxBgC,EAAUhC,WAA+C,OAAzBkC,EAAWlC,YAI9CqC,EAAgBrC,GAGY,OAAzBgC,EAAUjC,WACXkC,EAAa,CAAElC,aAAYC,eAE3BmC,EAAc,CAACpC,aAAYC,cAG3BQ,YAAW,KAENwB,EAAUjC,aAAeA,GAAciC,EAAUhC,YAAcA,GAEhEe,GAAWuB,GAAaA,EAAUC,IAAIxC,KACtCyC,KAEAhC,YAAW,KACTU,EAASD,EAAQ,GAEjBwB,QAAQC,IAAI,CAACV,cAEc,OAAxBA,EAAUhC,WACXqC,EAAgBL,EAAUhC,WAE5BqC,EAAgBrC,GAEhBwC,GAAoB,GACnB,IACL,GACC,KAGP,CAgBA,SAASA,IACPP,EAAa,CAAElC,WAAY,KAAMC,UAAW,OAC5CmC,EAAc,CAAEpC,WAAY,KAAMC,UAAW,MAC/C,CAEA,SAASqC,EAAgBrC,GAEvB+B,GAAeO,IAAS,IACnBA,EACH,CAACtC,IAAasC,EAAUtC,MAE5B,CAeA,OAvCAyC,QAAQC,IAAI5B,EAAQ6B,KAAOhC,EAAIC,EAAG,GAClCN,qBAAU,KAEHQ,EAAQ6B,OAAUhC,EAAIC,EAAG,IAC1BgC,MAAM,2CACNJ,IACAT,EAAc,CAAC,GACfhB,EAAW,IAAIC,KACfH,IACF,GAED,CAACC,IA6BFrB,eAAAoD,WAAA,CAAAlD,SAAA,CACAF,eAAA,QAAAE,SAAA,CAAM,UAAQsB,KAEdxB,eAAA,OAAKC,UAAWyB,EAAmB2B,MAAO,CAAEC,oBAAqB,UAAUpC,0BAA2BhB,SAAA,CACnG0B,EAAM2B,KAAI,CAACC,EAAMC,IAChBtD,cAACE,EAAI,CAEHC,WAAYkD,EACZjD,UAAWkD,EACXjD,UAAW6B,EAAWoB,GACtBhD,YAAakC,GAJRc,KAOTtD,cAAA,UAAQC,QAASgB,EAAUlB,SAAC,kBAE3B,E,MCrHQwD,MAV6B5D,IAAwB,IAAvB,cAAE6D,GAAe7D,EAC1D,OACIE,eAAA,OAAKC,UAAU,aAAYC,SAAA,CACvBC,cAAA,MAAAD,SAAI,cACJC,cAAA,KAAAD,SAAG,wBACHC,cAAA,UAAQC,QAASuD,EAAczD,SAAC,iBAC9B,ECgBC0D,MAxBf,WACE,MAAOC,EAAWC,GAAgBlD,mBAAS,UAc3C,OACEZ,eAAA,WAASC,UAAU,MAAKC,SAAA,CACP,WAAd2D,GAA0B1D,cAACN,EAAY,CAACE,YAd3BgE,KAChBD,EAAa,OAAO,IAcH,SAAdD,GAAwB1D,cAACc,EAAU,CAACC,EAAG,EAAGC,EAAG,EAAGC,UAXrC4C,KACdF,EAAa,MAAM,IAWF,QAAdD,GAAuB1D,cAACuD,EAAS,CAACC,cARnBM,KAClBH,EAAa,SAAS,MAU1B,EC/BAI,IAASC,OACPhE,cAACiE,IAAMC,WAAU,CAAAnE,SACfC,cAACyD,EAAG,MAENU,SAASC,eAAe,Q","file":"static/js/main.01639335.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/Common.css';\nimport '../styles/SplashScreen.css';\n\n/*\n    This is the SplashScreen component that will be displayed when the game starts.\n    It will display a welcome message and a button to start the game.\n    Optionally, we can add some instructions or a brief description of the game here\n    along with other options such as settings for the game including type of and number\n    of cards, and difficulty level.\n\n*/\n\ninterface SplashScreenProps {\n  onStartGame: () => void; // Prop function to start the game\n}\n\nconst SplashScreen: React.FC<SplashScreenProps> = ({ onStartGame }) => {\n  return (\n    <div className=\"screen\">\n      <h1>Welcome to My Game App!!</h1>\n      <p>This is the splash screen of the game.</p>\n      <button onClick={onStartGame}>Start Game</button>\n    </div>\n  );\n};\n\nexport default SplashScreen;","import React, { useEffect, useState } from 'react';\nimport '../styles/Card.css';\n\ninterface CardProps {\n  /*\n    This is the Card component that represents a single card in the game. We need to\n    track the state of the card to determine if it has been flipped or matched. We also\n    need to track the type of card to check if two cards are a match. If the cards are a match,\n    we can update the state of the cards to indicate that they are matched. If they are not a match,\n    we can flip the cards back over.\n  */\n  cardNumber: number;\n  cardIndex: number;\n  isClicked: boolean;\n  onCardClick: (cardNumber: number, cardIndex: number) => void; // Prop function to handle card click\n}\n\nconst Card: React.FC<CardProps> = ({ cardNumber, cardIndex, isClicked, onCardClick }) => {\n  const handleClick = () => {\n    onCardClick(cardNumber, cardIndex);\n  };\n\n  const [cardClass, setCardClass] = useState('card');\n\n  useEffect(() => {\n    if(isClicked){\n      setCardClass('card reveal-card');\n    }else if(cardClass.includes('reveal-card')){\n      setCardClass('card hide-card');\n      setTimeout(() => {\n        setCardClass('card');\n      }, 200);\n    }\n  }, [isClicked]);\n\n  return (\n    <div className={cardClass} onClick={handleClick}>\n      <p>{cardNumber}</p>\n    </div>\n  );\n};\n\nexport default Card;","import React, { useEffect, useState } from 'react';\nimport '../styles/GameScreen.css';\nimport Card from './Card'; // import the Card component\n\n/*\n    This is the GameScreen component that will be displayed when the game is in progress.\n    It will display the grid of cards and a button to end the game.\n    Optionally, we can add a timer, a score, and other game-related information here.\n    We need to keep track of the state of each card, the number of cards, and the type of cards\n    and implement the logic to check if two cards are a match. If they are a match, we can\n    update the state of the cards to indicate that they are matched. If they are not a match,\n    we can flip the cards back over.\n*/\n\ninterface Props {\n  // keep track of the number of cards in the x and y grid\n  x: number;\n  y: number;\n  onEndGame: () => void; // Prop function to end the game\n}\n\ninterface CardState {\n  cardNumber: number | null;\n  cardIndex: number | null;\n}\n\nconst GameScreen: React.FC<Props> = ({ x, y, onEndGame }) => {\n  const [MATCHES, setMatches] = useState(new Set<number>());\n  const [tries, setTries] = useState(0);\n  const [gameScreenClasses, setGameScreenClasses] = useState('gamescreen show-all');\n\n  setTimeout(() => {\n    setGameScreenClasses('gamescreen');\n  }, 2000);\n\n  const [cards] = useState<number[]>(shuffle(fillWithPairs(x * y)));\n  const [cardsState, setCardsState] = useState<{ [key: number]: boolean }>({});\n\n  const [firstCard, setFirstCard] = useState<CardState>({ cardNumber: null, cardIndex: null });\n  const [secondCard, setSecondCard] = useState<CardState>({ cardNumber: null, cardIndex: null });\n\n  function handleCardClick(cardNumber: number, cardIndex: number){\n    // Do nothing if same card is clicked more than\n    if(firstCard.cardIndex === cardIndex){\n      return;\n    }\n    \n    //Processing two cards, cannot process more thant two cards at a time\n    if(firstCard.cardIndex !== null && secondCard.cardIndex !== null){\n      return;\n    }\n\n    updateCardState(cardIndex);\n\n    // If the first card is not set, set it\n    if(firstCard.cardNumber === null){\n      setFirstCard({ cardNumber, cardIndex });\n    } else {// Otherwise check if match\n      setSecondCard({cardNumber, cardIndex});\n\n      // Copilot says that a setTimeout is necessary to access the updated state\n      setTimeout(() => {\n        // Add card to MATCHES if it matches\n        if(firstCard.cardNumber === cardNumber && firstCard.cardIndex !== cardIndex){\n          //setMatches(new Set<number>([...MATCHES, cardNumber]));\n          setMatches(prevState => prevState.add(cardNumber));\n          resetSelectedCards();\n        } else {// Otherwise, flip the cards back over\n          setTimeout(() => {\n            setTries(tries + 1);\n\n            console.log({firstCard})\n            // Flip the cards back over\n            if(firstCard.cardIndex !== null){\n              updateCardState(firstCard.cardIndex);\n            }\n            updateCardState(cardIndex);\n\n            resetSelectedCards();\n          }, 1000);\n        }\n      }, 0)\n    }\n\n  }\n\n  // Check if all cards are matched\n  console.log(MATCHES.size, (x * y)/2);\n  useEffect(() => {\n    //setTimeout(() => {\n      if(MATCHES.size === (x * y)/2){\n        alert(\"Congratulations! You have won the game!\");\n        resetSelectedCards();\n        setCardsState({});\n        setMatches(new Set());\n        onEndGame();\n      }\n    //}, 500);\n  }, [MATCHES]);\n\n  function resetSelectedCards(){\n    setFirstCard({ cardNumber: null, cardIndex: null });\n    setSecondCard({ cardNumber: null, cardIndex: null });\n  }\n\n  function updateCardState(cardIndex: number){\n    // Handling cards state\n    setCardsState( prevState => ({\n      ...prevState,\n      [cardIndex]: !prevState[cardIndex],\n    }));\n  }\n\n  // Create a function that given a total number of cards, will return an array of pairs of cards\n  function fillWithPairs(cardsTotal: number) {\n    const pairs = [];\n    for (let i = 1; i <= cardsTotal / 2; i++) {\n      pairs.push(i, i);\n    }\n    return pairs;\n  }\n\n  function shuffle(array: number[]) {\n    return array.sort(() => Math.random() - 0.5);\n  }\n\n  return (\n    <>\n    <span>Tries: {tries}</span>\n\n    <div className={gameScreenClasses} style={{ gridTemplateColumns: `repeat(${x}, minmax(100px, 1fr))` }}>\n      {cards.map((card, idx) => (\n        <Card\n          key={idx}\n          cardNumber={card}\n          cardIndex={idx}\n          isClicked={cardsState[idx]}\n          onCardClick={handleCardClick}\n          />\n      ))}\n      <button onClick={onEndGame}>End Game</button>\n    </div>\n    </>\n  );\n};\n\nexport default GameScreen;","import React from 'react';\nimport '../styles/EndScreen.css';\n\n/*\n    This is the EndScreen component that will be displayed when the game ends.\n    It will display a message and a button to restart the game.\n    Optionally, we can add the player's score and even a leaderboard along with\n    some stats about the game such as how long it took to complete the game and\n    how many moves the player made.\n*/\n\ninterface EndScreenProps {\n    onRestartGame: () => void; // Prop function to restart the game\n}\n\nconst EndScreen: React.FC<EndScreenProps> = ({ onRestartGame }) => {\n    return (\n        <div className=\"end-screen\">\n            <h1>Game Over</h1>\n            <p>Thanks for playing!</p>\n            <button onClick={onRestartGame}>Play Again</button>\n        </div>\n    );\n};\n\nexport default EndScreen;","import { useState } from 'react';\nimport SplashScreen from './components/SplashScreen';\nimport GameScreen from './components/GameScreen'; // import the GameScreen component\nimport EndScreen from './components/EndScreen'; // import the EndScreen component\n\n/*\n    This is the main App component that will manage the game state and render the appropriate\n    GameScreen and EndScreen components. The App component will keep track of the game state and\n    update it based on user interactions such as starting the game, ending the game, or restarting\n    the game.\n    Optionally, we can add more features such as a timer, a score, and a leaderboard to the game.\n*/\n\nfunction App() {\n  const [gameState, setGameState] = useState('splash'); // state to manage the game state\n\n  const startGame = () => {\n    setGameState('play'); // set gameState to 'play' when game starts\n  };\n\n  const endGame = () => {\n    setGameState('end'); // set gameState to 'end' when game ends\n  };\n\n  const restartGame = () => {\n    setGameState('splash'); // set gameState to 'splash' when game restarts\n  };\n\n  return (\n    <section className=\"App\">\n      {gameState === 'splash' && <SplashScreen onStartGame={startGame} />}\n      {gameState === 'play' && <GameScreen x={3} y={2} onEndGame={endGame} />}\n      {gameState === 'end' && <EndScreen onRestartGame={restartGame} />}\n    </section>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}